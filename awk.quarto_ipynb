{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# awk {.unnumbered}\n",
        "\n",
        "------------------------------------------------------------------------\n",
        "\n",
        "awk is scripting language named after its developers (Aho, Weinberger, and Kernighan) ([usage](https://www.geeksforgeeks.org/awk-command-unixlinux-examples/))\n",
        "\n",
        "------------------------------------------------------------------------\n",
        "\n",
        "Things to know about awk:\n",
        "\n",
        "-   awk refers to columns as field, such as in the variables for number of fields (`NF`), input field separator (`FS`), and output field separator (`OFS`).\n",
        "\n",
        "-   awk refers to rows as records, such as in the variables for record number (`NR`), input record separator (`RS`), and output record separator (`ORS`).\n",
        "\n",
        "-   By default, awk recognizes a space or tab as a field separator. If your input file has field separators other than a space or a tab, you need to specify it using the `-F` flag.\n",
        "\n",
        "-   awk has several built-in variables that can be used when writing code:\n",
        "\n",
        "    -   `$1` = field 1 (\\$2 = field 2, \\$3 = field 3, ...)\n",
        "\n",
        "    -   `$0` = entire record\n",
        "\n",
        "    -   `NF` = number of fields\n",
        "\n",
        "    -   `NR` = number of records\n",
        "\n",
        "    -   `FS` = input field separator; default is white space (i.e. space and tab)\n",
        "\n",
        "    -   `OFS` = output field separator; default is single space\n",
        "\n",
        "    -   `RS` = input record separator; default is new line\n",
        "\n",
        "    -   `ORS` = output record separator; default is new line\n",
        "\n",
        "    -   `[0-9]` = any number\n",
        "\n",
        "------------------------------------------------------------------------\n",
        "\n",
        "Each of the code examples shown below is preceded by viewing the input file to better visualize what each line of code is doing. The `$` at the beginning of each line of code represents the end of prompt you see in your command line. If you'd like to run the code in these examples, simply copy everything after the `$` into your command line.\n",
        "\n",
        "This is test code\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "```{bash}\n",
        "# Test bash code\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "``` {style=\"background-color: whitesmoke\"}\n",
        "$ cat data.txt\n",
        "GeneNames Sample1 Sample2 Sample3\n",
        "GeneX 321 5678  689\n",
        "GeneY 2354  6700  987\n",
        "GeneZ 2315  7890  123\n",
        "```\n",
        "\n",
        "Printing all of the fields (synonymous with `awk '{print $0}' data.txt`)\n",
        "\n",
        "``` {style=\"background-color: whitesmoke\"}\n",
        "$ cat data.txt\n",
        "GeneNames Sample1 Sample2 Sample3\n",
        "GeneX 321 5678  689\n",
        "GeneY 2354  6700  987\n",
        "GeneZ 2315  7890  123\n",
        "$ awk '{print}' data.txt\n",
        "GeneNames Sample1 Sample2 Sample3\n",
        "GeneX 321 5678  689\n",
        "GeneY 2354  6700  987\n",
        "GeneZ 2315  7890  123\n",
        "```\n",
        "\n",
        "Print a particular field (e.g. field 1)\n",
        "\n",
        "``` {style=\"background-color: whitesmoke\"}\n",
        "$ cat data.txt\n",
        "GeneNames Sample1 Sample2 Sample3\n",
        "GeneX 321 5678  689\n",
        "GeneY 2354  6700  987\n",
        "GeneZ 2315  7890  123\n",
        "$ awk '{print $1}' data.txt\n",
        "GeneNames\n",
        "GeneX\n",
        "GeneY\n",
        "GeneZ\n",
        "```\n",
        "\n",
        "Set input field separator as comma (,) (synonymous with `awk '{ FS = \",\" } ; {print $1}' data.csv`). Try leaving out the `-F,` and see what happens.\n",
        "\n",
        "``` {style=\"background-color: whitesmoke\"}\n",
        "$ cat data.csv\n",
        "GeneNames,Sample1,Sample2,Sample3\n",
        "GeneX,321,5678,689\n",
        "GeneY,2354,6700,987\n",
        "GeneZ,2315,7890,123\n",
        "$ awk -F, '{print $1}' data.txt\n",
        "GeneNames\n",
        "GeneX\n",
        "GeneY\n",
        "GeneZ\n",
        "```\n",
        "\n",
        "Print multiple fields (e.g. field 1 and 3)\n",
        "\n",
        "``` {style=\"background-color: whitesmoke\"}\n",
        "$ cat data.txt\n",
        "GeneNames Sample1 Sample2 Sample3\n",
        "GeneX 321 5678  689\n",
        "GeneY 2354  6700  987\n",
        "GeneZ 2315  7890  123\n",
        "$ awk '{print $1,$3}' data.txt\n",
        "GeneNames Sample2\n",
        "GeneX 5678\n",
        "GeneY 6700\n",
        "GeneZ 7890\n",
        "```\n",
        "\n",
        "Print the last field\n",
        "\n",
        "``` {style=\"background-color: whitesmoke\"}\n",
        "$ cat data.txt\n",
        "GeneNames Sample1 Sample2 Sample3\n",
        "GeneX 321 5678  689\n",
        "GeneY 2354  6700  987\n",
        "GeneZ 2315  7890  123\n",
        "$ awk '{print $NF}' data.txt\n",
        "Sample3\n",
        "689\n",
        "987\n",
        "123\n",
        "```\n",
        "\n",
        "Print all records after the first record (synonymous with `awk 'NR!=1 {print}' /path/to/file`)\n",
        "\n",
        "``` {style=\"background-color: whitesmoke\"}\n",
        "$ cat data.txt\n",
        "GeneNames Sample1 Sample2 Sample3\n",
        "GeneX 321 5678  689\n",
        "GeneY 2354  6700  987\n",
        "GeneZ 2315  7890  123\n",
        "$ awk 'NR>1 {print}' data.txt\n",
        "GeneX 321 5678  689\n",
        "GeneY 2354  6700  987\n",
        "GeneZ 2315  7890  123\n",
        "```\n",
        "\n",
        "Print a particular record (e.g. record 3)\n",
        "\n",
        "``` {style=\"background-color: whitesmoke\"}\n",
        "$ cat data.txt\n",
        "GeneNames Sample1 Sample2 Sample3\n",
        "GeneX 321 5678  689\n",
        "GeneY 2354  6700  987\n",
        "GeneZ 2315  7890  123\n",
        "$ awk 'NR==3 {print}' data.txt\n",
        "GeneY 2354  6700  987\n",
        "```\n",
        "\n",
        "Print all records except for a particular record (e.g. not record 3)\n",
        "\n",
        "``` {style=\"background-color: whitesmoke\"}\n",
        "$ cat data.txt\n",
        "GeneNames Sample1 Sample2 Sample3\n",
        "GeneX 321 5678  689\n",
        "GeneY 2354  6700  987\n",
        "GeneZ 2315  7890  123\n",
        "$ awk 'NR!=3 {print}' data.txt\n",
        "GeneNames Sample1 Sample2 Sample3\n",
        "GeneX 321 5678  689\n",
        "GeneZ 2315  7890  123\n",
        "```\n",
        "\n",
        "Print a range of records (e.g. records 2 to 3)\n",
        "\n",
        "``` {style=\"background-color: whitesmoke\"}\n",
        "$ cat data.txt\n",
        "GeneNames Sample1 Sample2 Sample3\n",
        "GeneX 321 5678  689\n",
        "GeneY 2354  6700  987\n",
        "GeneZ 2315  7890  123\n",
        "$ awk 'NR==2, NR==3 {print}' data.txt\n",
        "GeneY 2354  6700  987\n",
        "GeneZ 2315  7890  123\n",
        "```\n",
        "\n",
        "Print records with fewer than a certain number of fields (e.g. fewer than 4 fields)\n",
        "\n",
        "``` {style=\"background-color: whitesmoke\"}\n",
        "$ cat data2.txt\n",
        "GeneNames Sample1 Sample2 Sample3\n",
        "GeneX 321 5678  689\n",
        "GeneY 2354  6700\n",
        "GeneZ 2315  7890  123\n",
        "$ awk 'NF<4 {print}' data.txt\n",
        "GeneNames Sample1 Sample2 Sample3\n",
        "GeneX 321 5678  689\n",
        "GeneZ 2315  7890  123\n",
        "```\n",
        "\n",
        "Print records containing a certain string anywhere in record (e.g. `abc`):\n",
        "\n",
        "``` {style=\"background-color: whitesmoke\"}\n",
        "$ cat data3.txt\n",
        "abcd dcba efgh  hgfe\n",
        "bcde dabc  cbad  abdc\n",
        "cdef defg  efgh  fghi\n",
        "$ awk '/abc/ {print}'\n",
        "abcd dcba efgh  hgfe\n",
        "bcde dabc  cbad  abdc\n",
        "```\n",
        "\n",
        "Print records starting with a certain string\n",
        "\n",
        "``` {style=\"background-color: whitesmoke\"}\n",
        "$ cat data3.txt\n",
        "abcd dcba efgh  hgfe\n",
        "bcde dabc  cbad  abdc\n",
        "cdef defg  efgh  fghi\n",
        "$ awk '/^abc/ {print}'\n",
        "abcd dcba efgh  hgfe\n",
        "```\n",
        "\n",
        "Print records ending with a certain string. One caveat between macOS and Windows (even when using wsl) is that the line ending character in macOS (i.e. unix) is `\\n` while the line ending character in Windows is `\\r\\n`. This means that a text file made on a Mac may have a different line ending character than Windows recognizes (and vice versa). To avoid this problem...\n",
        "\n",
        "``` {style=\"background-color: whitesmoke\"}\n",
        "$ cat data3.txt\n",
        "abcd dcba efgh  hgfe\n",
        "bcde dabc  cbad  abdc\n",
        "cdef defg  efgh  fghi\n",
        "$ awk '/abc$/ {print}'\n",
        "abcd dcba efgh  hgfe\n",
        "```\n",
        "\n",
        "Print records that don't contain a certain string anywhere in record\n",
        "\n",
        "``` {style=\"background-color: whitesmoke\"}\n",
        "$ cat data3.txt\n",
        "abcd dcba efgh  hgfe\n",
        "bcde dabc  cbad  abdc\n",
        "cdef defg  efgh  fghi\n",
        "$ awk '!/abc/ {print}'\n",
        "cdef defg  efgh  fghi\n",
        "```\n",
        "\n",
        "Print records that don't start with a certain string: `awk '!/^string/ {print}' /path/to/file`\n",
        "\n",
        "``` {style=\"background-color: whitesmoke\"}\n",
        "$ cat data3.txt\n",
        "abcd dcba efgh  hgfe\n",
        "bcde dabc  cbad  abdc\n",
        "cdef defg  efgh  fghi\n",
        "$ awk '!/^abc/ {print}'\n",
        "bcde dabc  cbad  abdc\n",
        "cdef defg  efgh  fghi\n",
        "```\n"
      ],
      "id": "cfd17047"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/williammills/Library/Python/3.9/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}