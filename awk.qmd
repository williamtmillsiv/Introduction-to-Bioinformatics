# awk {.unnumbered}

------------------------------------------------------------------------

awk is scripting language named after its developers (Aho, Weinberger, and Kernighan) ([usage](https://www.geeksforgeeks.org/awk-command-unixlinux-examples/))

------------------------------------------------------------------------

Things to know about awk:

-   awk refers to columns as field, such as in the variables for number of fields (`NF`), input field separator (`FS`), and output field separator (`OFS`).

-   awk refers to rows as records, such as in the variables for record number (`NR`), input record separator (`RS`), and output record separator (`ORS`).

-   By default, awk recognizes a space or tab as a field separator. If your input file has field separators other than a space or a tab, you need to specify it using the `-F` flag.

-   awk has several built-in variables that can be used when writing code:

    -   `$1` = field 1 (\$2 = field 2, \$3 = field 3, ...)

    -   `$0` = entire record

    -   `NF` = number of fields

    -   `NR` = number of records

    -   `FS` = input field separator; default is white space (i.e. space and tab)

    -   `OFS` = output field separator; default is single space

    -   `RS` = input record separator; default is new line

    -   `ORS` = output record separator; default is new line

    -   `[0-9]` = any number

------------------------------------------------------------------------

The sample file used in all of the example codes below is called `data.txt`. You can download the file [here](data.txt). Here is what the top of that file looks like:

``` {style="background-color: lightgray"}
$ head data.txt
GeneNames Sample1 Sample2 Sample3
GeneX 321 5678  689
GeneY 2354  6700  987
GeneZ 2315  7890  123
```

Printing all of the fields (synonymous with `awk '{print $0}' data.txt`)

``` {style="background-color: lightgray"}
$ awk '{print}' data.txt
GeneNames Sample1 Sample2 Sample3
GeneX 321 5678  689
GeneY 2354  6700  987
GeneZ 2315  7890  123
```

Print a particular field (e.g. field 1)

``` {style="background-color: lightgray"}
$ awk '{print $1}' data.txt
GeneNames
GeneX
GeneY
GeneZ
```

Set input field separator as comma (,) (synonymous with `awk '{ FS = "," } ; {print $1}' data.csv`). Try leaving out the `-F,` and see what happens.

``` {style="background-color: lightgray"}
$ head data.csv
GeneNames,Sample1,Sample2,Sample3
GeneX,321,5678,689
GeneY,2354,6700,987
GeneZ,2315,7890,123
$ awk -F, '{print $1}' data.txt
GeneNames
GeneX
GeneY
GeneZ
```

Print multiple fields (e.g. field 1 and 3): `awk '{print $1,$3}' /path/to/file`

``` {style="background-color: lightgray"}
$ awk '{print $1,$3}' data.txt
GeneNames Sample2
GeneX 5678
GeneY 6700
GeneZ 7890
```

Print the last field

``` {style="background-color: lightgray"}
$ awk '{print $NF}' data.txt
Sample3
689
987
123
```

Print all records after the first record (synonymous with `awk 'NR!=1 {print}' /path/to/file`)

``` {style="background-color: lightgray"}
$ awk 'NR>1 {print}' data.txt
GeneX 321 5678  689
GeneY 2354  6700  987
GeneZ 2315  7890  123
```

Print a particular record (e.g. record 3): `awk 'NR==3 {print}' /path/to/file`

``` {style="background-color: lightgray"}
$ awk 'NR==3 {print}' data.txt
GeneY 2354  6700  987
```

Print all records except for a particular record (e.g. not record 3)

``` {style="background-color: lightgray"}
$ awk 'NR!=3 {print}' data.txt
GeneNames Sample1 Sample2 Sample3
GeneX 321 5678  689
GeneZ 2315  7890  123
```

Print a range of records (e.g. records 2 to 3)

``` {style="background-color: lightgray"}
$ awk 'NR==2, NR==3 {print}' data.txt
GeneY 2354  6700  987
GeneZ 2315  7890  123
```


Print records with fewer than a certain number of fields (e.g. fewer than 4 fields)

``` {style="background-color: lightgray"}
$ head data2.txt
GeneNames Sample1 Sample2 Sample3
GeneX 321 5678  689
GeneY 2354  6700
GeneZ 2315  7890  123
$ awk 'NF<4 {print}' data.txt
GeneNames Sample1 Sample2 Sample3
GeneX 321 5678  689
GeneZ 2315  7890  123
```

Print records containing a certain string (anywhere in record): `awk '/string/ {print}' /path/to/file`

``` {style="background-color: lightgray"}
$
```




-   Print records starting with a certain string: `awk '/^string/ {print}' /path/to/file`

-   Print records ending with a certain string: `awk '/string$/ {print}' /path/to/file`

-   Print records that don't contain a certain string (anywhere in record): `awk '!/string/ {print}' /path/to/file`

-   Print records that don't start with a certain string: `awk '!/^string/ {print}' /path/to/file`

-   Print records that don't end with a certain string: `awk '!/string$/ {print}' /path/to/file`

-   Print records where a particular field contains a string (e.g. field 1): `awk '$1 ~ /string/ {print}' /path/to/file`

-   Print records where a particular field starts with a string (e.g. field 1): `awk '$1 ~ /^string/ {print}' /path/to/file`

-   Print records where a particular field ends with a string (e.g. field 1): `awk '$1 ~ /string$/ {print}' /path/to/file`

-   Print records where a particular field starts with any number (e.g. field 1): `awk '$1 ~ /^[0-9]/ {print}' /path/to/file`

-   Print records where a particular field ends with any number (e.g. field 1): `awk '$1 ~ /[0-9]$/ {print}' /path/to/file`

-   Ignore case when looking for records containing a string: `awk 'tolower($0) ~ /string/ {print}' /path/to/file`

-   Print records that contain a certain value in a particular field (e.g. the number 10 in field 2): `awk '$2==10 {print}' /path/to/file`

-   Print records that do not contain a certain value in a particular field (e.g. not the number 10 in field 2): `awk '$2!=10 {print}' /path/to/file`

-   Print records that contain a value greater than a certain value in a particular field (e.g. \>10 in field 2): `awk '$2>10 {print}' /path/to/file`

-   Print records that contain a value less than a certain value in a particular field (e.g. \<10 in field 2): `awk '$2<10 {print}' /path/to/file`

Sum values in a field (e.g. field 2): `awk '{sum+=$2;} END{print sum;}' /path/to/file`

-   Remember to add `NR>1` if your file has a header: `awk 'NR>1 {sum+=$2;} END{print sum;}' /path/to/file`

Remove blank lines: `awk 'NF' /path/to/file`Â 

Print the record number at beginning of record: `awk '{print NR,$0}' /path/to/file`
