# awk {.unnumbered}

awk is scripting language named after its developers (Aho, Weinberger, and Kernighan) ([usage](https://www.geeksforgeeks.org/awk-command-unixlinux-examples/))

------------------------------------------------------------------------

Things to know about awk:

-   awk refers to columns as field, such as in the variables for number of fields (`NF`), input field separator (`FS`), and output field separator (`OFS`).

-   awk refers to rows as records, such as in the variables for record number (`NR`), input record separator (`RS`), and output record separator (`ORS`).

-   By default, awk recognizes a space or tab as a field separator. If your input file has field separators other than a space or a tab, you need to specify it using the `-F` flag.

-   awk has several built-in variables that can be used when writing code:

    -   `$1` = field 1 (\$2 = field 2, \$3 = field 3, ...)

    -   `$0` = entire record

    -   `NF` = number of fields

    -   `NR` = number of records

    -   `FS` = input field separator; default is white space (i.e. space and tab)

    -   `OFS` = output field separator; default is single space

    -   `RS` = input record separator; default is new line

    -   `ORS` = output record separator; default is new line

    -   `[0-9]` = any number

------------------------------------------------------------------------

Each of the code examples shown below is preceded by viewing the input file to better visualize what each line of code is doing. The `$` at the beginning of each line of code represents the end of prompt you see in your command line. If you'd like to run the code in these examples, simply copy everything after the `$` into your command line.

```{bash}
cat data.txt
```

This is a test R code block

```{r}
# Test R code
dim(cars)
```
