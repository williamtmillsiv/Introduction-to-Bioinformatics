{
  "hash": "1f10c38896689e7cc43c4ffdcaadc67e",
  "result": {
    "engine": "knitr",
    "markdown": "# Data Types {.unnumbered}\n\nR stores the data you give it in the most optimal way that it can for it to do the manipulations and graphing that you desire. Here are the terms we use to describe these classifications:\n\nTerm    Definition      \n------  ------------\nType    Classification for how an object is stored internally in R (a.k.a. storage mode)\nClass   Broader classification of how an object is stored in R (the more common language you would use in conversation and writing)\n\n>The term \"object\" describes any \"thing\" in R such as numbers, characters, etc. (described below).\n\nYou can figure out the type or class of any object by using the `typeof()` or `class()` functions, respectively. Here is how we determine the type and class of the object `3`:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n> These operations are called functions. A function is some task you want R to perform and what you put inside the parentheses is the object you want R to perform that function on. In these examples, the \"task\" you want R to perform is to tell you what the type or class of of an object is and the object in these examples is `3`.\n\n> Every function in R has specific requirements for how it is used. To learn about the requirements for any particular function you can use the `help()` function. For example, to learn how to use the `typeof()` function, you can run `help(typeof)`.\n\nIn the examples above you'll notice that `typeof()` and `class()` use different terms to describe the same object (in this case, `3`). Below is a table that helps visualize these distinctions (there are many other types and classes but these are the ones you will see most often).\n\n| Object | Type | Class | Notes |\n|:---|:---|:---|:---|\n| \"a\" | Character | Character | Letters must be in quotes or they will be interpreted as an object (discussed below) |\n| 3 | Double | Numeric | Double = double precision floating point numbers (significand and exponent) |\n| 3L | Integer | Integer | Can only be whole numbers (i.e. no decimals) |\n| TRUE or FALSE | Logical | Logical |  |\n\n<br>\nIn addition to determining the type or class of an object (using `typeof()` or `class()`), you can also determine if an object is a particular type or class (using `is.double()`, `is.numeric()`, `is.integer()`, `is.character()`, `is.logical()`). For example:\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis.double(3) # TRUE\nis.numeric(3) # TRUE\nis.integer(3) # FALSE\nis.character(3) # FALSE\n\nis.double(3L) # FALSE\nis.numeric(3L) # TRUE\nis.integer(3L) # TRUE\nis.character(3L) # FALSE\n\nis.logical(TRUE) # TRUE\nis.numeric(TRUE) # FALSE\nis.character(TRUE) # FALSE\nis.character(\"TRUE\") # TRUE\n\nis.logical(\"abc\") # FALSE\nis.numeric(\"abc\") # FALSE\nis.character(\"abc\") # TRUE\n```\n:::\n\n\n\n\n\n\n\n\nNotice that the \"answer\" to these functions is logical (`TRUE` or `FALSE`); this is a very useful feature of R that you will see later.\n\n> Imagine having a data set with a list of cities and their average yearly rainfall totals. With a simple line of code, R can quickly tell you whether each city's average yearly rainfall is above or below a certain number (outputing `TRUE` or `FALSE` for each city).\n\nIt is often useful to store some information (numbers, text, etc.) as a variable that can be easily referenced later. For example, rather than having to type out the number 10481034582 every time you need to use it, you can simply save it as a variable (R calls these variables \"objects\"). Let's use the letter `x` as our new object. After executing this function you should see it appear in your R environment under \"Values\" in the Environment panel in the top-right corner of RStudio:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 10481034582\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10481034582\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nYou can change the value of your object by running the same code with a different value:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 54321\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 54321\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n> CAUTION: this overwriting of an object can't be undone except by starting over and regenerating it the way you did originally. To see if you have used an object name already, check under \"Values\" in the Environment panel in the top-right of RStudio.\n\nNow, anytime you need to use that value you can simply use the object instead:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(12345)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n\n```{.r .cell-code}\nx <- 12345\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Let's overwrite the object x to prove that it is holding the correct value\n\ntypeof(\"abcd\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\nx <- \"abcd\"\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nThese new objects don't have to be single letters, they can also be multiple letters or words; they just can't start with a number or contain any special characters other than an underscore `_`. This can help you remember which objects are which:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbig_number <- 10481034582\nbig_number\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10481034582\n```\n\n\n:::\n\n```{.r .cell-code}\nsmall_number <- 54321\nsmall_number\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 54321\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nAs you start generating your own code and pipelines for analyzing data, you will find this feature particularly useful as you can avoid having to change every occurrence of an object and instead just change it a single time when you originally create the object.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}