{
  "hash": "f1e07df5c789750295074db252a6a951",
  "result": {
    "engine": "jupyter",
    "markdown": "# awk {.unnumbered}\n\nawk is scripting language named after its developers (Aho, Weinberger, and Kernighan) ([usage](https://www.geeksforgeeks.org/awk-command-unixlinux-examples/))\n\nHere is some vocabulary commonly used by awk:\n\n-   Field = column\n\n-   Record = line (i.e. row)\n\nawk has several built-in variables that can be used in its code:\n\n-   `$1` = field 1 (\\$2 = field 2, \\$3 = field 3, ...)\n\n-   `$0` = entire record\n\n-   `NF` = number of fields\n\n-   `NR` = number of records\n\n-   `FS` = input field separator; default is white space (i.e. space and tab)\n\n-   `OFS` = output field separator; default is single space\n\n-   `RS` = input record separator; default is new line\n\n-   `ORS` = output record separator; default is new line\n\n-   `[0-9]` = any number\n\nPrinting fields\n\n```         \nThis is a block of code.\n```\n\n\n\n\n\n\n\n\n```{bash}\n\n```\n\n\n\n\n\n\n\n\n-   Print every field of every record: `awk '{print}' /path/to/file` (synonymous with `awk '{print $0}' /path/to/file`)\n\n-   Print a particular field (e.g. field 1): `awk '{print $1}' /path/to/file`\\\n\n    -   Set input field separator as comma (,): `awk -F, '{print $1}' /path/to/file` (synonymous with `awk '{ FS = \",\" } ; {print $1}' /path/to/file`)\n\n-   Print multiple fields (e.g. field 1 and 3): `awk '{print $1,$3}' /path/to/file`\n\n-   Print the last field: `awk '{print $NF}' /path/to/file`\n\nPrinting records\n\n-   Print all records after the first record: `awk 'NR>1 {print}' /path/to/file` (synonymous with `awk 'NR!=1 {print}' /path/to/file`)\n\n-   Print a particular record (e.g. record 3): `awk 'NR==3 {print}' /path/to/file`\n\n-   Print all records except for a particular record (e.g. not record 3): `awk 'NR!=3 {print}' /path/to/file`\n\n-   Print a range of records (e.g. records 3 to 6): `awk 'NR==3, NR==6 {print}' /path/to/file`\n\n-   Print records with fewer than a certain number of fields (e.g. fewer than 3 fields):  `awk 'NF<3 {print}' /path/to/file`\n\n-   Print records containing a certain string (anywhere in record): `awk '/string/ {print}' /path/to/file`\n\n-   Print records starting with a certain string: `awk '/^string/ {print}' /path/to/file`\n\n-   Print records ending with a certain string: `awk '/string$/ {print}' /path/to/file`\n\n-   Print records that don't contain a certain string (anywhere in record): `awk '!/string/ {print}' /path/to/file`\n\n-   Print records that don't start with a certain string: `awk '!/^string/ {print}' /path/to/file`\n\n-   Print records that don't end with a certain string: `awk '!/string$/ {print}' /path/to/file`\n\n-   Print records where a particular field contains a string (e.g. field 1): `awk '$1 ~ /string/ {print}' /path/to/file`\n\n-   Print records where a particular field starts with a string (e.g. field 1): `awk '$1 ~ /^string/ {print}' /path/to/file`\n\n-   Print records where a particular field ends with a string (e.g. field 1): `awk '$1 ~ /string$/ {print}' /path/to/file`\n\n-   Print records where a particular field starts with any number (e.g. field 1): `awk '$1 ~ /^[0-9]/ {print}' /path/to/file`\n\n-   Print records where a particular field ends with any number (e.g. field 1): `awk '$1 ~ /[0-9]$/ {print}' /path/to/file`\n\n-   Ignore case when looking for records containing a string: `awk 'tolower($0) ~ /string/ {print}' /path/to/file`\n\n-   Print records that contain a certain value in a particular field (e.g. the number 10 in field 2): `awk '$2==10 {print}' /path/to/file`\n\n-   Print records that do not contain a certain value in a particular field (e.g. not the number 10 in field 2): `awk '$2!=10 {print}' /path/to/file`\n\n-   Print records that contain a value greater than a certain value in a particular field (e.g. \\>10 in field 2): `awk '$2>10 {print}' /path/to/file`\n\n-   Print records that contain a value less than a certain value in a particular field (e.g. \\<10 in field 2): `awk '$2<10 {print}' /path/to/file`\n\nSum values in a field (e.g. field 2): `awk '{sum+=$2;} END{print sum;}' /path/to/file`\n\n-   Remember to add `NR>1` if your file has a header: `awk 'NR>1 {sum+=$2;} END{print sum;}' /path/to/file`\n\nRemove blank lines: `awk 'NF' /path/to/file` \n\nPrint the record number at beginning of record: `awk '{print NR,$0}' /path/to/file`\n\n",
    "supporting": [
      "awk_files"
    ],
    "filters": [],
    "includes": {}
  }
}