{
  "hash": "c39349d90f3982e705cb277d4a8c83ec",
  "result": {
    "engine": "knitr",
    "markdown": "# awk {.unnumbered}\n\nawk is scripting language named after its developers (Aho, Weinberger, and Kernighan) ([usage](https://www.geeksforgeeks.org/awk-command-unixlinux-examples/))\n\n------------------------------------------------------------------------\n\nThings to know about awk:\n\n-   awk refers to columns as field, such as in the variables for number of fields (`NF`), input field separator (`FS`), and output field separator (`OFS`).\n\n-   awk refers to rows as records, such as in the variables for record number (`NR`), input record separator (`RS`), and output record separator (`ORS`).\n\n-   By default, awk recognizes a space or tab as a field separator. If your input file has field separators other than a space or a tab, you need to specify it using the `-F` flag.\n\n-   awk has several built-in variables that can be used when writing code:\n\n    -   `$1` = field 1 (\\$2 = field 2, \\$3 = field 3, ...)\n\n    -   `$0` = entire record\n\n    -   `NF` = number of fields\n\n    -   `NR` = number of records\n\n    -   `FS` = input field separator; default is white space (i.e. space and tab)\n\n    -   `OFS` = output field separator; default is single space\n\n    -   `RS` = input record separator; default is new line\n\n    -   `ORS` = output record separator; default is new line\n\n    -   `[0-9]` = any number\n\n------------------------------------------------------------------------\n\nBelow are examples of how the awk command can be used to achieve lots of desired outcomes when processing data files.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat data.txt # View data.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenes\tSample1\tSample2\tSample3\nGeneX\t3210\t5678\t689\nGeneY\t2354\t6700\t987\nGeneZ\t2315\t7890\t123\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nPrinting all of the fields (synonymous with `awk '{print $0}' data.txt`)\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk '{print}' data.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenes\tSample1\tSample2\tSample3\nGeneX\t3210\t5678\t689\nGeneY\t2354\t6700\t987\nGeneZ\t2315\t7890\t123\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nPrint a particular field (e.g. field 1)\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk '{print $1}' data.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenes\nGeneX\nGeneY\nGeneZ\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nIf input file uses a comma (`,`) as a field separator instead of space or tab, set input field separator as (`,`) (synonymous with `awk '{ FS = \",\" } ; {print $1}' data.csv`).\n\n>Try leaving out the `-F,` and see what happens.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat data.csv # View comma separated file (.csv)\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenes,Sample1,Sample2,Sample3\nGeneX,3210,5678,689\nGeneY,2354,6700,987\nGeneZ,2315,7890,123\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk -F, '{print $1}' data.csv\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenes\nGeneX\nGeneY\nGeneZ\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nPrint multiple fields (e.g. field 1 and 3)\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk '{print $1,$3}' data.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenes Sample2\nGeneX 5678\nGeneY 6700\nGeneZ 7890\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nPrint the last field\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk '{print $NF}' data.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSample3\n689\n987\n123\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nPrint all records after the first record (synonymous with `awk 'NR!=1 {print}' /path/to/file`)\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk 'NR>1 {print}' data.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeneX\t3210\t5678\t689\nGeneY\t2354\t6700\t987\nGeneZ\t2315\t7890\t123\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nPrint a particular record (e.g. record 3)\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk 'NR==3 {print}' data.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeneY\t2354\t6700\t987\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nPrint all records except for a particular record (e.g. not record 3)\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk 'NR!=3 {print}' data.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenes\tSample1\tSample2\tSample3\nGeneX\t3210\t5678\t689\nGeneZ\t2315\t7890\t123\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nPrint a range of records (e.g. records 2 to 3)\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk 'NR==2, NR==3 {print}' data.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeneX\t3210\t5678\t689\nGeneY\t2354\t6700\t987\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nPrint records with fewer than a certain number of fields (e.g. fewer than 4 fields)\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat data2.txt # View data2.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenes\tSample1\tSample2\tSample3\nGeneX\t3210\t5678\t689\nGeneY\t2354\t6700\t\nGeneZ\t2315\t7890\t123\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk 'NF<4 {print}' data2.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeneY\t2354\t6700\t\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nPrint records containing a certain string anywhere in record (e.g. `abc`)\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat data3.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nabcd\tdcba\tefgh\taabc\nbcde\tdabc\tcbad\tabdc\ncdef\tdefg\tefgh\tfghi\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk '/abc/ {print}' data3.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nabcd\tdcba\tefgh\taabc\nbcde\tdabc\tcbad\tabdc\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nPrint records starting with a certain string (e.g. `abc`)\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk '/^abc/ {print}' data3.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nabcd\tdcba\tefgh\taabc\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nPrint records ending with a certain string (e.g. `abc`)\n>One caveat between macOS and Windows (even when using wsl) is that the line ending character in macOS (i.e. unix) is `\\n` while the line ending character in Windows is `\\r\\n`. This means that a text file made on a Mac may have a different line ending character than Windows recognizes (and vice versa). To avoid this problem...\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk '/abc$/ {print}' data3.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nabcd\tdcba\tefgh\taabc\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nPrint records that don't contain a certain string anywhere in record (e.g. `abc`)\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk '!/abc/ {print}' data3.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncdef\tdefg\tefgh\tfghi\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nPrint records that don't start with a certain string (e.g. `abc`)\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk '!/^abc/ {print}' data3.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nbcde\tdabc\tcbad\tabdc\ncdef\tdefg\tefgh\tfghi\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nPrint records that don't end with a certain string (e.g. `abc`)\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk '!/abc$/ {print}' data3.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nbcde\tdabc\tcbad\tabdc\ncdef\tdefg\tefgh\tfghi\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nPrint records where a particular field contains a string (e.g. `abc` in field 1)\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk '$1 ~ /abc/ {print}' data3.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nabcd\tdcba\tefgh\taabc\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nPrint records where a particular field starts with a string (e.g. `abc` in field 1)\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk '$1 ~ /^abc/ {print}' data3.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nabcd\tdcba\tefgh\taabc\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nPrint records where a particular field ends with a string (e.g. `abc` in field 4)\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk '$4 ~ /abc$/ {print}' data3.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nabcd\tdcba\tefgh\taabc\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nPrint records where a particular field starts with any number (e.g. field 1)\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat data4.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1ABC\tD1CB\tEF1G\tAAB1\nb2cd\tda2b\tcba2\t2abc\nCD3E\tDEF3\t3EFG\tF2GH\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk '$1 ~ /^[0-9]/ {print}' data4.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1ABC\tD1CB\tEF1G\tAAB1\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nPrint records where a particular field ends with any number (e.g. field 1)\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk '$1 ~ /[0-9]$/ {print}' data4.txt\n```\n:::\n\n\n\n\n\n\n\n\nIgnore case when looking for records containing a string (e.g. `abc`)\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk 'tolower($0) ~ /abc/ {print}' data4.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1ABC\tD1CB\tEF1G\tAAB1\nb2cd\tda2b\tcba2\t2abc\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nPrint records that contain a certain value in a particular field (e.g. the number 3210 in field 2)\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat data.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenes\tSample1\tSample2\tSample3\nGeneX\t3210\t5678\t689\nGeneY\t2354\t6700\t987\nGeneZ\t2315\t7890\t123\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk '$2==3210 {print}' data.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeneX\t3210\t5678\t689\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nPrint records that do not contain a certain value in a particular field (e.g. not the number 10 in field 2)\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk '$2!=3210 {print}' data.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenes\tSample1\tSample2\tSample3\nGeneY\t2354\t6700\t987\nGeneZ\t2315\t7890\t123\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nPrint records that contain a value greater than a certain value in a particular field (e.g. \\>2354 in field 2)\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk '$2>2354 {print}' data.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenes\tSample1\tSample2\tSample3\nGeneX\t3210\t5678\t689\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nPrint records that contain a value less than a certain value in a particular field (e.g. \\<2354 in field 2)\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk '$2<2354 {print}' data.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeneZ\t2315\t7890\t123\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nPrint records that contain a value less than or equal to a certain value in a particular field (e.g. \\<2354 in field 2)\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk '$2<=2354 {print}' data.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeneY\t2354\t6700\t987\nGeneZ\t2315\t7890\t123\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nSum values in a field (e.g. field 2)\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk '{sum+=$2;} END{print sum;}' data.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n7879\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nRemember to add `NR>1` if your file has a header in case the headers are numeric\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk 'NR>1 {sum+=$2;} END{print sum;}' data.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n7879\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nRemove blank lines\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat data5.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenes\tSample1\tSample2\tSample3\nGeneX\t3210\t5678\t689\nGeneY\t2354\t6700\t987\n\nGeneZ\t2315\t7890\t123\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk 'NF' data5.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenes\tSample1\tSample2\tSample3\nGeneX\t3210\t5678\t689\nGeneY\t2354\t6700\t987\nGeneZ\t2315\t7890\t123\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nPrint the record number at beginning of record\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk '{print NR,$0}' data.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1 Genes\tSample1\tSample2\tSample3\n2 GeneX\t3210\t5678\t689\n3 GeneY\t2354\t6700\t987\n4 GeneZ\t2315\t7890\t123\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}